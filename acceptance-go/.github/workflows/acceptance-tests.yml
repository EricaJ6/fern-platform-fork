name: Acceptance Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'acceptance-go/**'
      - 'deployments/**'
      - '.github/workflows/acceptance-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'acceptance-go/**'
      - 'deployments/**'
      - '.github/workflows/acceptance-tests.yml'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - api
          - integration
          - ui
          - smoke
      parallel_processes:
        description: 'Number of parallel processes'
        required: false
        default: '2'
        type: string

env:
  GO_VERSION: '1.21'
  GINKGO_VERSION: 'latest'
  K3S_VERSION: 'v1.28.2+k3s1'
  KUBEVELA_VERSION: 'v1.9.7'

jobs:
  setup-cluster:
    name: Setup Test Cluster
    runs-on: ubuntu-latest
    outputs:
      cluster-ready: ${{ steps.cluster-check.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          k3d version

      - name: Create k3d cluster
        run: |
          k3d cluster create k3s-default \
            --api-port 6550 \
            --servers 1 \
            --agents 2 \
            --image rancher/k3s:${{ env.K3S_VERSION }} \
            --wait \
            --timeout 300s

      - name: Install KubeVela
        run: |
          # Install KubeVela CLI
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/
          
          # Install KubeVela on cluster
          vela install --version ${{ env.KUBEVELA_VERSION }} --wait

      - name: Install CloudNativePG
        run: |
          kubectl apply -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.20/releases/cnpg-1.20.0.yaml
          kubectl wait --for=condition=Available deployment/cnpg-controller-manager -n cnpg-system --timeout=300s

      - name: Setup KubeVela component definitions
        run: |
          # Install standard component definitions
          vela addon enable vela-workflow
          vela addon enable terraform
          vela addon enable cloudshell
          
          # Wait for addons to be ready
          sleep 30

      - name: Verify cluster setup
        id: cluster-check
        run: |
          cd acceptance-go
          make verify-cluster
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: Save kubeconfig
        run: |
          mkdir -p ~/.kube
          k3d kubeconfig get k3s-default > ~/.kube/config
          
      - name: Upload kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/config
          retention-days: 1

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: setup-cluster
    if: needs.setup-cluster.outputs.cluster-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Restore k3d cluster
        run: |
          k3d cluster start k3s-default || k3d cluster create k3s-default --kubeconfig-update-default=false
          export KUBECONFIG=~/.kube/config

      - name: Install KubeVela CLI
        run: |
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/

      - name: Run smoke tests
        working-directory: acceptance-go
        run: |
          export KUBECONFIG=~/.kube/config
          make test-smoke PARALLEL_PROCESSES=2 VERBOSE=true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: acceptance-go/test-results/

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [setup-cluster, smoke-tests]
    if: |
      always() && 
      needs.setup-cluster.outputs.cluster-ready == 'true' && 
      (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Restore k3d cluster
        run: |
          k3d cluster start k3s-default || true
          export KUBECONFIG=~/.kube/config

      - name: Install KubeVela CLI
        run: |
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/

      - name: Run API tests
        working-directory: acceptance-go
        run: |
          export KUBECONFIG=~/.kube/config
          make test-api PARALLEL_PROCESSES=${{ github.event.inputs.parallel_processes || '2' }} VERBOSE=true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: acceptance-go/test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-cluster, smoke-tests]
    if: |
      always() && 
      needs.setup-cluster.outputs.cluster-ready == 'true' && 
      (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Restore k3d cluster
        run: |
          k3d cluster start k3s-default || true
          export KUBECONFIG=~/.kube/config

      - name: Install KubeVela CLI
        run: |
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/

      - name: Run integration tests
        working-directory: acceptance-go
        run: |
          export KUBECONFIG=~/.kube/config
          make test-integration PARALLEL_PROCESSES=${{ github.event.inputs.parallel_processes || '2' }} VERBOSE=true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: acceptance-go/test-results/

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: [setup-cluster, smoke-tests]
    if: |
      always() && 
      needs.setup-cluster.outputs.cluster-ready == 'true' && 
      (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped') &&
      (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'ui' || github.event.inputs.test_suite == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Restore k3d cluster
        run: |
          k3d cluster start k3s-default || true
          export KUBECONFIG=~/.kube/config

      - name: Install KubeVela CLI
        run: |
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/

      - name: Run UI tests
        working-directory: acceptance-go
        run: |
          export KUBECONFIG=~/.kube/config
          export HEADLESS=true
          make test-ui PARALLEL_PROCESSES=1 VERBOSE=true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-results
          path: acceptance-go/test-results/

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-screenshots
          path: acceptance-go/test-results/screenshots/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup-cluster, api-tests, integration-tests]
    if: |
      always() && 
      needs.setup-cluster.outputs.cluster-ready == 'true' && 
      (needs.api-tests.result == 'success' || needs.api-tests.result == 'skipped') &&
      (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') &&
      (github.event_name == 'push' || github.event.inputs.test_suite == 'all')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Restore k3d cluster
        run: |
          k3d cluster start k3s-default || true
          export KUBECONFIG=~/.kube/config

      - name: Install KubeVela CLI
        run: |
          curl -fsSl https://kubevela.net/script/install.sh | bash
          sudo mv ~/.vela/bin/vela /usr/local/bin/

      - name: Run performance tests
        working-directory: acceptance-go
        run: |
          export KUBECONFIG=~/.kube/config
          make test-performance PARALLEL_PROCESSES=1 VERBOSE=true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: acceptance-go/test-results/

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [setup-cluster, smoke-tests, api-tests, integration-tests, ui-tests, performance-tests]
    if: always() && needs.setup-cluster.outputs.cluster-ready == 'true'
    steps:
      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Cleanup k3d cluster
        run: |
          k3d cluster delete k3s-default || true

  report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-tests, integration-tests, ui-tests, performance-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results/

      - name: Generate test report
        run: |
          echo "# Acceptance Test Results" > test-report.md
          echo "" >> test-report.md
          echo "## Test Execution Summary" >> test-report.md
          echo "" >> test-report.md
          
          if [ -d "test-results/smoke-test-results" ]; then
            echo "✅ Smoke Tests: Completed" >> test-report.md
          else
            echo "❌ Smoke Tests: Failed or Skipped" >> test-report.md
          fi
          
          if [ -d "test-results/api-test-results" ]; then
            echo "✅ API Tests: Completed" >> test-report.md
          else
            echo "❌ API Tests: Failed or Skipped" >> test-report.md
          fi
          
          if [ -d "test-results/integration-test-results" ]; then
            echo "✅ Integration Tests: Completed" >> test-report.md
          else
            echo "❌ Integration Tests: Failed or Skipped" >> test-report.md
          fi
          
          if [ -d "test-results/ui-test-results" ]; then
            echo "✅ UI Tests: Completed" >> test-report.md
          else
            echo "❌ UI Tests: Failed or Skipped" >> test-report.md
          fi
          
          if [ -d "test-results/performance-test-results" ]; then
            echo "✅ Performance Tests: Completed" >> test-report.md
          else
            echo "❌ Performance Tests: Failed or Skipped" >> test-report.md
          fi

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });